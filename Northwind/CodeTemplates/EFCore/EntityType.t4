<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Infrastructure" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ template hostSpecific="true" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata.Internal" #>
<#
    var services = (IServiceProvider)Host;
    var code = services.GetRequiredService<ICSharpHelper>();
#>
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace <#= NamespaceHint #>;

public partial class <#= EntityType.Name #>
{
<#
    var keyProperties = EntityType.GetKeys().SelectMany(k => k.Properties)
        .Concat(EntityType.GetForeignKeys().SelectMany(k => k.Properties))
        .Distinct()
        .ToList();

    foreach (var keyProperty in keyProperties)
    {
        var fieldName = "_" + keyProperty.Name.Substring(0, 1).ToLower() + keyProperty.Name.Substring(1);
        if (!keyProperty.ClrType.IsValueType)
        {
            fieldName += " = null!";
        }
#>
    private readonly <#= code.Reference(keyProperty.ClrType) #> <#= fieldName #>;
<#

    }
#>

    public <#= EntityType.Name #>(<#

    var requiredProperties = EntityType.GetProperties()
        .Where(p => !p.IsNullable && !keyProperties.Contains(p))
        .Select(p => new
        {
            p.Name,
            Type = p.ClrType.ShortDisplayName(),
            ParameterName = p.Name.Substring(0, 1).ToLower() + p.Name.Substring(1)
        }).ToList();

    var comma = "";
    foreach (var property in requiredProperties)
    {
#><#= comma #>
        <#= property.Type #> <#= property.ParameterName #><#
        comma = ", ";
    }
#>)
    {
<#
    foreach (var property in requiredProperties)
    {
#>
        <#= property.Name #> = <#= property.ParameterName #>;
<#
    }
#>
    }

<#
    foreach (var property in EntityType.GetProperties().Where(p => !keyProperties.Contains(p)))
    {
        if (property.IsNullable)
        {
#>
    public <#=
    code.Reference(property.ClrType) + (property.ClrType.IsValueType ? "" : "?") #> <#= property.Name #> { get; set; }
<#
        }
        else
        {
#>
    public <#= code.Reference(property.ClrType) #> <#= property.Name #> { get; }
<#
        }
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        var fk = navigation.ForeignKey;
        var targetType = navigation.TargetEntityType;
        if (navigation.IsOnDependent)
        {
            if (fk.IsRequired)
            {
#>
    public <#= targetType.Name #> <#= navigation.Name #> { get; set; } = null!;
<#
            }
            else
            {
#>
    public <#= targetType.Name #>? <#= navigation.Name #> { get; set; }
<#
            }
        }
        else
        {
            if (navigation.IsCollection)
            {
#>
    public ICollection<<#= targetType.Name #>> <#= navigation.Name #> { get; } = new List<<#= targetType.Name #>>();
<#

            }
            else
            {
#>
    public <#= targetType.Name #>? <#= navigation.Name #> { get; set; }
<#
            }
        }
    }

    foreach (var navigation in EntityType.GetSkipNavigations())
    {
        var targetType = navigation.TargetEntityType;
#>
    public ICollection<<#= targetType.Name #>> <#= navigation.Name #> { get; } = new List<<#= targetType.Name #>>();
<#
    }
#>
}
