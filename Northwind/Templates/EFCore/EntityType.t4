<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ template hostSpecific="true" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#
    var services = (IServiceProvider)Host;
    var code = services.GetRequiredService<ICSharpHelper>();
#>
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace <#= NamespaceHint #>;

public partial class <#= EntityType.Name #>
{
<#
    foreach (var property in EntityType.GetProperties())
    {
        if (property.ClrType.IsValueType)
        {
#>
        public <#= code.Reference(property.ClrType) #> <#= property.Name #> { get; set; }
<#
        }
        else
        {
#>
        public <#=
    code.Reference(property.ClrType) + (property.IsNullable ? "?" : "") #> <#= property.Name #> { get; set; } <#= property.IsNullable ? "" : " = null!;" #>
<#
        }
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        var fk = navigation.ForeignKey;
        var targetType = navigation.TargetEntityType;
        if (navigation.IsOnDependent)
        {
            if (fk.IsRequired)
            {
#>
        public <#= targetType.Name #> <#= navigation.Name #> { get; set; } = null!;
<#
            }
            else
            {
#>
        public <#= targetType.Name #>? <#= navigation.Name #> { get; set; }
<#
            }
        }
        else
        {
            if (navigation.IsCollection)
            {
#>
        public ICollection<<#= targetType.Name #>> <#= navigation.Name #> { get; } = new List<<#= targetType.Name #>>();
<#

            }
            else
            {
#>
        public <#= targetType.Name #>? <#= navigation.Name #> { get; set; }
<#
            }
        }
    }

    foreach (var navigation in EntityType.GetSkipNavigations())
    {
        var targetType = navigation.TargetEntityType;
#>
        public ICollection<<#= targetType.Name #>> <#= navigation.Name #> { get; } = new List<<#= targetType.Name #>>();
<#
    }
#>
}
